"""Content models for IRIS agent."""

from datetime import datetime
from enum import Enum
from typing import Optional
from uuid import UUID, uuid4

from pydantic import Field

from agent_sdk.models.base import BaseModel


class OutlineSection(str, Enum):
    """Standard outline structure sections."""

    DEFINE = "define"
    CONTRAST = "contrast"
    SYNTHESIZE = "synthesize"
    PROJECT = "project"


class OutlineModel(BaseModel):
    """Structured outline generated by IRIS."""

    id: UUID = Field(default_factory=uuid4, description="Unique outline ID")
    idea_id: UUID = Field(..., description="Associated idea ID")
    title: str = Field(..., min_length=1, max_length=500, description="Content title")

    # Outline sections
    define: str = Field(..., min_length=1, description="Define the concept/topic")
    contrast: str = Field(
        ..., min_length=1, description="Contrast with alternatives/counterpoints"
    )
    synthesize: str = Field(
        ..., min_length=1, description="Synthesize insights and connections"
    )
    project: str = Field(
        ..., min_length=1, description="Project implications and future directions"
    )

    # Metadata
    key_points: list[str] = Field(default_factory=list, description="Key points to cover")
    target_length: Optional[int] = Field(
        None, description="Target word count for final draft"
    )

    created_at: datetime = Field(
        default_factory=datetime.utcnow, description="Creation timestamp"
    )

    def get_full_outline(self) -> str:
        """Get formatted full outline text."""
        return f"""
# {self.title}

## Define
{self.define}

## Contrast
{self.contrast}

## Synthesize
{self.synthesize}

## Project
{self.project}
        """.strip()


class VoicePrint(BaseModel):
    """Voice parameters for maintaining authentic tone."""

    avg_sentence_length: float = Field(..., description="Average sentence length in words")
    sentence_length_variance: float = Field(..., description="Standard deviation of sentence length")
    paragraph_length: float = Field(..., description="Average paragraph length in sentences")

    comma_frequency: float = Field(..., description="Commas per 100 words")
    em_dash_frequency: float = Field(..., description="Em dashes per 100 words")
    semicolon_frequency: float = Field(..., description="Semicolons per 100 words")

    lexical_diversity: float = Field(
        ..., ge=0.0, le=1.0, description="Type-token ratio (vocabulary diversity)"
    )
    avg_word_length: float = Field(..., description="Average word length in characters")
    common_phrases: list[str] = Field(default_factory=list, description="Frequently used phrases")

    uses_questions: bool = Field(default=False, description="Frequently uses rhetorical questions")
    uses_lists: bool = Field(default=False, description="Frequently uses bullet points/lists")
    uses_examples: bool = Field(default=True, description="Frequently provides examples")

    formality_level: float = Field(
        ..., ge=0.0, le=1.0, description="Formality score (0=casual, 1=formal)"
    )
    technical_level: float = Field(
        ..., ge=0.0, le=1.0, description="Technical language usage (0=plain, 1=technical)"
    )


class DraftStatus(str, Enum):
    """Lifecycle status of a draft."""

    GENERATING = "generating"
    READY = "ready"
    CLEANING = "cleaning"
    CLEANED = "cleaned"
    SCHEDULED = "scheduled"
    PUBLISHED = "published"


class DraftModel(BaseModel):
    """Content draft generated by IRIS."""

    id: UUID = Field(default_factory=uuid4, description="Unique draft ID")
    outline_id: UUID = Field(..., description="Associated outline ID")
    idea_id: UUID = Field(..., description="Original idea ID")

    # Content
    title: str = Field(..., min_length=1, max_length=500, description="Draft title")
    content: str = Field(..., min_length=100, description="Draft content (markdown)")

    # Voice metrics
    voice_score: float = Field(..., ge=0.0, le=1.0, description="Voice consistency score (0-1)")
    voice_deviation: float = Field(..., ge=0.0, description="Deviation from baseline voice parameters")
    applied_voiceprint: Optional[VoicePrint] = Field(
        None, description="VoicePrint used for generation"
    )

    # Metadata
    word_count: int = Field(..., ge=0, description="Total word count")
    estimated_read_time: int = Field(..., ge=0, description="Estimated read time in minutes")

    # Lifecycle
    status: DraftStatus = Field(default=DraftStatus.GENERATING, description="Current draft status")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Creation timestamp")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Last update timestamp")

    def mark_ready(self) -> None:
        """Mark draft as ready for next stage."""
        self.status = DraftStatus.READY
        self.updated_at = datetime.utcnow()

    def calculate_read_time(self, words_per_minute: int = 200) -> int:
        """Calculate estimated read time."""
        return max(1, self.word_count // words_per_minute)
